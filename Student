// ConsoleApplication1.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include <iostream>
#include <string.h>

using namespace std;

//специальный тип данных, чтобы узнать - правильно ли создан объект класса или нет
enum StatusEr
{
	OK, Err
};

// Двусвязный список
template<typename T>
class List
{
public:
	List() : head(nullptr), tail(nullptr) {}

	// Нахождение элемента
	T* Find(T value);
	// Вставка элемента в конец
	void PushBack(T value);
	// Удаление элемента по значению
	bool Erase(T value);
	// Вывод списка
	void Print();

private:
	// Голова списка
	ListNode<T>* head;
	// Хвост списка
	ListNode<T>* tail;

	// Нахождение элемента по значению
	ListNode<T>* FindNode(T value);
	// Вставка после заданного элемента
	void InsertAfter(ListNode<T>* elem, T value);
	// Удаление элемента
	bool EraseNode(ListNode<T>* elem);
};


//Описание класса Кошки
class Students
{
public:
	Students(string f, string n, string sn, int dp, string napr, int z); // конструктор - задаем ФИО, дату рождения, номер зачетки 
											  // так как считаем, что не может быть кошка с пустой породой, бесцветная, с нулевым весом и без возраста
	Students() { Status = Err; }				  // конструктор по умолчанию - добавляется для работы с указателями - нужен только для создания динамического объекта, 
											  // поэтому не может использовать в других случаях!
	~Students();
//геттеры/селекторы - узнать значение атрибута (поля, характеристики объекта)
	string getFamily();
	string getName();
	string getSurName();
	int getDatePost();
	int getNapr();
	int getNumber();
// специальный
	bool getStatus(); //прежде чем начать работу со студентом - узнать, а можно ли с ним работать
//сеттеры/модификаторы - установить (изменить) значение атрибута (поля, характеристики объекта), если это разрешено
	bool setName(string n);
	bool setNapr(string napr);
	bool setNumber(int z);
//действия
	void Go();    // студент идет
	void Voice(); // студент говорит 
	void Print(); //вывод информации о конкретном объекте, в дальнейшем лучше заменить на перегрузку операторов вывода!
	bool operator==(const Students& otherStudents) const;

private:
	string Family;
	string Name;
	string SurName;
	int DateBorn;
	string Faculty;
	string Napr;
	int Zachetka;
	int Status; 
	bool ChangeNapr(string napr); //служебный метод класса, недоступен извне! Сделан для того, чтобы единым образом проверять на допустимость попытку изменить вес кошки
};

//реализация
Students::Students(string f, string n, string sn, int db, string fac, string napr, int z)
{
	if (f == "" || n == "" || sn == "" || v <= 0 || db <= 0 || z <= 0) //заданы недопустимые значения полей - объект будет создан со статусом ошибка, чтобы нельзя было его использовать
		Status = Err;
	else {
		Family = f;
		Name = n;
		SurName = sn;
		DatePost = db;
		Faculty = fac;
		Napr = napr;
		Number = z;
		Status = OK; // всё в порядке, кошка создана
	}
}

Students::~Students()
{
}

string Students::getFamily()
{
	if (Status == OK) return Family;
	else return "";
}

string Students::getName()
{
	if (Status == OK) return Name;
	else return "";
}

string Students::getSurName()
{
	if (Status == OK) return SurName;
	else return "";
}

Date Students::getDateBorn()
{
	if (Status == OK) return DateBorn;
	else return NULL;
}

int Students::getNapr()
{
	if (Status == OK) return Napr;
	else return 0;
}

int Cats::getNumber() 
{
	if (Status == OK) return Zachetka;
	else return 0;
}

bool Cats::getStatus()
{
	return Status;
}

bool Students::setNumber(int z)
{
	if (z > 0)
		Number = z;
}

bool Students::setName(string n) //студент поменял имя
{
	if (Status == OK)
		if (n == "")   // нельзя дать студенту пустое имя
			return false;
		else { 
			Name = nm;
			return true;
		}
	else false;
}

bool Students::ChangeNapr(string napr)
{
	Napr = napr;
	return true;
}

bool Students::setNapr(string napr)
{
	if (napr != "")
		return ChangeNapr(napr);
	return false;
}

void Students::Go()
	if (Status == OK) {
		cout << Name.c_str() << " пошел гулять\n";
	}
}

void Students::Voice() // Студент нормально говорит. Говорить может только правильный студент
{
	if (Status == OK) {
		cout << Name <<" говорит по-человечески ";
	}
}

void Students::Print() 
	if (Status == OK) {
		cout << "\nСтудент: " << "Фамилия - " << Name << ", Имя - " << Family << ", Отчество - " << SurName << ",\n";
		cout << "год поступления - " << DatePost << ", факультет - " << faculty << ", направление - " << napr << ", номер зачетки - " << Number << "\n";
	}
}

bool operator==(const Students& otherStudents) const
{
	return Number == otherStudents.Number;
}

int main()
{
	system("pause");
    return 0;
}
